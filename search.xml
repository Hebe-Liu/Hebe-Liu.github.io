<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[AutoMySQL Incremental Backup on CentOS 7]]></title>
    <url>%2Fmysql_bak.html</url>
    <content type="text"><![CDATA[MySQL backup and point in time recovery with binary logs. MySQLSetup required directories123456mkdir /var/log/mysql/mkdir /home/mysql/cd /home/mysqlmkdir backup # Full backup filesmkdir script # mysqlFullBack.sh &amp; mysqlIncreBack.shmkdir backup/incremental # Incremental backup files Enable binary logsvim /etc/my.cnf1234# Enable binary logging and save the logs under /var/log/mysql/ directorylog_bin=/var/log/mysql/mysql-bin.log# All logs older that 7 days will be automatically deletedexpire_logs_day=7 /var/log/mysql/mysql-bin.index contains list of all binary log files. Restart MySQL server12systemctl restart mysqlmysql -u root -p mysql-bin.000001 is currently active log in which will be written SQL for changes done on all databases Full backup script1234567891011121314151617181920212223242526272829303132333435363738#!/bin/bashsource /etc/profileBakDir=/home/mysql/backupLogFile=/home/mysql/backup/bak.logDate=`date +%Y%m%d`Begin=`date +&quot;%Y-%m-%d %H:%M:%S&quot;`DumpFile=$Date.sqlcd $BakDir# Full backup with mysqldump. # --single-transaction will dump InnoDB tables in a consistent state# --flush-logs will close current logs and open a new one# --master-data=2 will write binary log coordinates in SQL comment in the dump filemysqldump --single-transaction --flush-logs --master-data=2 -uroot -ppassword dbname &gt; $DumpFileLast=`date +&quot;%Y-%m-%d %H:%M:%S&quot;`echo [FullBack] begin at $Begin end at $Last $DumpFile successful &gt;&gt; $LogFile# Send files via scp using sshpasssshpass -p password scp $DumpFile root@ip:/home/mysql/full/# Delete files older than 7 daysfind $BakDir -mtime +7 -type f -name &quot;*.sql&quot; | xargs rm -f# Delete incremental filescd $BakDir/incrementalrm -f# Upload files using FTPftp -n&lt;&lt;!open ipuser username passwordbinarypromptmput $DumpFileclosebye! MySQL binlog backup script1234567891011121314151617181920212223242526272829303132333435#!/bin/shsource /etc/profile# Force MySQL to start using new log files, flush the logs.mysqladmin -uroot -ppassword flush-logsDataDir=/var/log/mysqlBakDir=/home/mysql/backup/incrementalLogFile=/home/mysql/backup/bak.logcd $DataDirFILELIST=$(cat mysql-bin.index)# Count the number of lines, which is files.COUNTER=0for file in $FILELIST; do COUNTER=$(expr $COUNTER + 1)doneNextNum=0for file in $FILELIST; do base=$(basename $file) NextNum=$(expr $NextNum + 1) if [ $NextNum -eq $COUNTER ]; then echo &quot;skip lastest&quot; else dest=$BakDir/$base if (test -e $dest); then echo &quot;skip exist $base&quot; else echo &quot;copying $base&quot; cp $base $BakDir sshpass -p password scp $base root@ip:/home/mysql/incremental/ fi fidoneecho [IncrementalBack] `date +&quot;%Y-%m-%d %H:%M:%S&quot;` Bakup successful! &gt;&gt; $LogFile Add the execute permission12chmod +x mysqlFullBack.shchmod +x mysqlIncreBack.sh CrontabCheck if Cron is running123service cron status# Orservice crond status Set up a Cron job1crontab -e Edit the current crontab123# Minute(0-59) Hour(0-23) Day of Month(1-31) Month(1-12 or Jan-Dec) Day of Week(0-6 or Sun-Sat) Command0 0 * * * /home/mysql/script/mysqlFullBack.sh0 3,9,15,21 * * /home/mysql/script/mysqlIncreBack.sh Restart service1service crond restart Other crontab options1234# Display the current crontabcrontab -l# Remove the current crontabcrontab -r Restore database from backupFull backup recovery1mysql -u root -p dbname &lt; /home/mysql/backup/$Date.sql Apply the changes from the binary log1mysqlbinlog mysql-bin.00000* | mysql -uroot -p dbname To include multiple logs, you can first restore data from the last incremental backup, and then restore additional data from those new logs. Reference INCREMENTAL BACKUP using MYSQLDUMP]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Increasing the size of a root partition using LVM]]></title>
    <url>%2Froot_extend.html</url>
    <content type="text"><![CDATA[I’m using the CentOS 7 that has xfs partition cantos-root mounted as /. It’s almost running out of space so I added a new drive with 50GB space to volume group and then extend cantos-root. Get the information about newly added hard disk1fdisk -l Create the partition and change the partition type to LVM(8e)1fdisk /dev/sdc Reload the partition table1partprobe /dev/sdc LVM1lvm Create new PV (Physical Volume) Extend the size of a volume group to get more space for expanding lv. There are 12799 free PE available. So we can use the PE size to extend the logical volume up-to 50GB more. Re-size the file-system1xfs_growfs /dev/mapper/centos-root Vertify disk size1df -h]]></content>
      <tags>
        <tag>Disk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Add an Additional Disk Drive to Your Linux]]></title>
    <url>%2Ffdisk.html</url>
    <content type="text"><![CDATA[Add an additional disk drive to the system without affecting the operation, using fdisk and partporbe command. PrerequisitesPlease make sure that the hard drive was physically added to your system. List all the disks available with the system.1fdisk -l Create a primary partitionFirst format the drive using fdisk utility.1fdisk /dev/sdc Proceed with these option:1234n # add a new partitionp # primary1 # choose default 1 for partition numberw # write table to disk and exit Informs the operating system kernel of partition table changes1partprobe /dev/sdc Format our new partition with ext4 filesystem1mkfs -t ext4 /dev/sdc1 Mount it up12mkdir /mnt/mount_dirmount /dev/sdc1 /mnt/mount_dir Edit /etc/fstab to enter the drive into the fstab file so that it is recognized and mounted upon system boot.123/dev/sdc1 /mnt/mount_dir ext4 defaults 0 0# The digits refer to whether the mount should be backed up &amp; the order in which &quot;fsck&quot; check the mount points# (0=no) Cross Check1df -h]]></content>
      <tags>
        <tag>Disk</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Install MongoDB on CentOS 7]]></title>
    <url>%2Fmongo.html</url>
    <content type="text"><![CDATA[Version: MongoDB 4.0.0 PrerequisitesDownload the installation package and extract tgz 12curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.0.tgztar -zxvf mongodb-linux-x86_64-4.0.0.tgz Copy the unpacked package to the specified directory 1mv mongodb-linux-x86_64-4.0.0 /usr/local/mongodb Add the MongoDB executable to your PATH 1export PATH=/usr/local/mongodb/bin:$PATH Create a database directory 1mkdir -p /data/mongodata Run the MongoDB service1mongod --dbpath=/data/mongodata --logpath=/data/mongodata/mongo.log &amp; The mongo Shell123mongo&gt;use dbname&gt;load(&quot;/data/xxx.js&quot;)]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Systemd unit configuration]]></title>
    <url>%2Fservice.html</url>
    <content type="text"><![CDATA[Systemctl is a controlling interface and inspection tool for the widely-adopted init system and service manager systemd. Prerequisites1234mkdir -p /opt/micro_servicecd /opt/micro_servicemkdir logsvim dump_log.sh Config logs 12# Add the execute permission and test itchmod +x dump_log.sh Config service123cd /etc/systemd/system# &lt;APP_NAME&gt;.servicevim eureka.service Activate service12345# Reload all unit filessystemctl daemon-reload# Enable a service at bootsystemctl enable &lt;APP_NAME&gt;.servicesystemctl start &lt;APP_NAME&gt;.service Reference Intro to Systemd -Ruan Yifeng]]></content>
      <tags>
        <tag>Systemd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Server 2008 automatic backup]]></title>
    <url>%2Fpowershell.html</url>
    <content type="text"><![CDATA[Backup database by Powershell + Task Scheduler on Windows, upload with FTP. PowershellInstall dependencyOpen Powershell as administrator, install the SQL Server PowerShell cmdlet.1Install-Module -Name SqlServer Backup Script123456789101112131415161718192021222324252627282930313233343536373839404142434445# Define parameters$date = Get-Date -Format yyyyMMdd$dbname = "SQLTestDB" $limit = (Get-Date).AddDays(-30)$path = "D:\BackUp\full_backup"$backupFile = $path + '\' + $dbname + '_fulldb_' + $date +'.bak'Backup-SqlDatabase ` -ServerInstance 'ServerName' ` -Database $dbname ` -BackupAction Database ` -BackupFile $backupFile ` -BackupSetName "$dbname-full database backup" # -Incremental # Automate FTP uploads# Go to destinationcd $path$location = Get-Location# Get files$files = Get-ChildItem -recurse # Delete files older than the $limit$files | Where-Object &#123; $_.CreationTime -lt $limit &#125; | Remove-Item# Get ftp object$ftp_client = New-Object System.Net.WebClient$ftp_address = "ftp://root:123456@172.19.227.9"# Make uploadsforeach($file in $files)&#123; if ($file.Name -like "*$date*")&#123; $directory = ""; $source = $file.DirectoryName + "\" + $file; if ($file.DirectoryName.Length -gt 0) &#123; $directory = $file.DirectoryName.Replace($Location,"") &#125; $directory += "/"; $ftp_command = $ftp_address + $directory + $file $uri = New-Object System.Uri($ftp_command) "Command is " + $uri + " file is $source" $ftp_client.UploadFile($uri, $source) &#125;&#125; Run the script to test. Using SQL ServerIn this example, the SQLTestDB database will be backed up to disk at D:\BackUp\full_backup. In SQL Server Management studio, right-click SQLTestDB, point to Tasks, and then click Back Up. Select Add and enter D:\BackUp\full_backup\SQLTestDB_fulldb_20190603.bak in the file name text box. Establish A Windows Scheduled Task Create Basic Task in the Actions panel Enter “SQLTestDB full backup” as a name, Click Next In the “Trigger” section, select the “Weekly” or the interval you would like the task to run, Click Next On the next screen select your start date, scheduled backup time and day, Click Next Under Action select “Start a Program”. Click Next Example on the Start a Program screen: Program/script: powershell Add arguments (optional): D:\BackUp\full_db_backup.ps1 # Where the backup script is located Start in (optional): D:\BackUp Finish]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Automatically backup database on Linux - Oracle]]></title>
    <url>%2Foracle_bak.html</url>
    <content type="text"><![CDATA[Backup Oracle database by crontab , mount a Windows share. Prerequisites1234# Add a linkcd /home/oraclemkdir dbbakmount -t cifs -o username=root,password=123456,rw,dir_mode=0777,file_mode=0777 //172.19.227.9/dbbak$ /home/oracle/dbbak/ 12345# Switch to the user oraclesu - oracle# The location of databasecd /oracle/product/11.2.0/db_1/bin/vim auto_backup.sh Config backup1234567891011121314151617#!/bin/bashdate_str=$(date +%Y%m%d)source /home/oracle/.bash_profile# Delete files older than 7 daysfind /home/oracle/dbbak/* -mtime +7 -exec rm \&#123;&#125; \;# Change root/123456 into your own settings/oracle/product/11.2.0/db_1/bin/exp \ root/123456 \ owner=root \ file=/home/oracle/dbbak/BACKUP_$date_str.dmp \ log=/home/oracle/dbbak/BACKUP_$date_str.logecho backup_$date_str.sql OK Config source1vim /home/oracle/.bash_profile User specific environment and startup programs12345678910111213PATH=$PATH:$HOME/.local/bin:$HOME/binexport PATHexport NLS_LANG=american_america.UTF8# The location of database installedexport ORACLE_BASE=/oracle# The location of database export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1 # INSTANCE_NAMEexport ORACLE_SID=orcl export ORACLE_UNQNAME=$ORACLE_SID# Set environment variablesexport PATH=$ORACLE_HOME/bin:/user/sbin:$PATHexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH Add the execute permission and test it12chmod +x auto_backup.sh./auto_backup.sh Check if Cron is running123service cron status# Orservice crond status Set up a Cron job1crontab -e Edit the current crontab123# Minute(0-59) Hour(0-23) Day of Month(1-31) Month(1-12 or Jan-Dec) Day of Week(0-6 or Sun-Sat) Command# This line executes the &quot;auto_backup.sh&quot; at 1AM from Sunday to Friday0 1 * * 1,2,3,4,5 /oracle/product/11.2.0/db_1/bin/auto_backup.sh Restart service1service cron restart]]></content>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Setup a Redis Cluster on Centos 7]]></title>
    <url>%2Fredis.html</url>
    <content type="text"><![CDATA[Redis Cluster is an active-passive cluster implementation that consists of master and slave nodes. The cluster uses hash partitioning to split the key space into 16,384 key slots, with each master responsible for a subset of those slots.Redis Sentinel monitors the masters and votes to promote slaves when masters die. PrerequisitesTree machines, each of them has one master and one slave. 172.19.226.208: 6383 6384172.19.226.209: 6385 6386172.19.226.210: 6387 6388 RedisTCP ports12345firewall-cmd --permanent --new-zone=redisfirewall-cmd --permanent --zone=redis --add-port=6383/tcpfirewall-cmd --permanent --zone=redis --add-port=16383/tcpfirewall-cmd --permanent --zone=redis --add-source=client_server_private_IPfirewall-cmd --reload Install Redis1234wget http://download.redis.io/releases/redis-4.0.14.tar.gztar -zxvf redis-4.0.14.tar.gzcd redis-4.0.14make &amp; make install Setup required directories1234567cp redis.conf /usr/local/bincp sentinel.conf /usr/local/bincp src/redis-trib.rb /usr/local/bincd /usr/local/binmkdir redisdata redislogcp redis.conf 6383.confmv redis.conf 6384.conf Config redisHere is “6383.conf” file. Notice that port and bind values will be different for each node.12345678910111213141516171819202122232425262728293031323334# Bind your public/local ip, to let you access by your ip address bind 172.19.226.208# Let clients from other hosts to connect to Redisprotected-mode no# Specify redis instance portport 6383# Run as background servicedaemonize yes# For daemonized pid file pathpidfile /var/run/redis_6383.pid# Specify log file pathlogfile &quot;/usr/local/bin/redislog/6383.log&quot;# Specify db dump pathdbfilename 6383.rdb# db will written into this directorydir /usr/local/bin/redisdata# Load data from AOF fileappendonly yesappendfilename &quot;6383.aof&quot;# Enables the cluster modecluster-enabled yescluster-config-file nodes-6383.conf# For it to be considered in failure statecluster-node-timeout 5000 Start Redis1redis-server /usr/local/bin/6383.conf Redis client123redis-cli -h 172.19.226.208 -p 6383&gt;ping&gt;SHUTDOWN Redis ClusterInstall Ruby12345yum install centos-release-scl-rhyum install rh-ruby25 -yscl enable rh-ruby25 bashruby -vgem install redis Set environment variablesAdding the output of command “export” to the bottom of /etc/profile.123exportvim /etc/profilesource /etc/profile Creating the cluster1redis-trib.rb create --replicas 1 172.19.226.208:6383 172.19.226.209:6385 172.19.226.210:6387 172.19.226.208:6384 172.19.226.209:6386 172.19.226.210:6388 Redis Sentinel12mv sentinel.conf 26383.confvim 26383.conf Config sentinel12port 26383sentinel monitor mymaster 172.19.226.208 6383 2 Start sentinel1redis-sentinel /usr/local/bin/26383.conf &amp; ERROR [ERR] Node 172.19.226.208:6383 is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0. To wipe the node clean:123456cd redisdatarm -f *redis-cli -h 172.19.226.208 -p 6383&gt;flushall&gt;cluster reset&gt;exit Waiting for the cluster to join….. Make sure that not just the TCP listening port for the clients, but also the Cluster Bus port, is open. The Cluster bus port is always the Redis base port + 10000.123firewall-cmd --permanent --zone=redis--add-port=16383/tcpfirewall-cmd --permanent --zone=redis--add-port=16384/tcpfirewall-cmd --reload]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
